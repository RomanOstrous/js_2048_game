{"version":3,"sources":["scripts/main.js"],"names":["score","field","moved","touchStartX","touchStartY","touchEndX","touchEndY","startButton","document","querySelector","gameScore","gameField","messageStart","messageWin","messageLose","rulesButton","rulesExitButton","rules","rows","columns","startGame","Array","from","length","classList","add","replace","innerText","addRandomCell","setTimeout","availableCells","getAvailableCells","randomCell","Math","floor","random","value","row","column","updateField","push","innerHTML","newRow","createElement","newCell","textContent","remove","appendChild","gameLose","cell","pressKeyDown","e","key","moveCellsUp","moveCellsDown","moveCellsLeft","moveCellsRight","newColumn","handleSwipe","swipeThreshold","deltaX","deltaY","abs","addEventListener","touches","clientX","clientY","changedTouches"],"mappings":"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","file":"main.10495f97.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('tbody');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst rulesButton = document.querySelector('.rules');\nconst rulesExitButton = document.querySelector('.rules-exit');\nconst rules = document.querySelector('.rules-container');\n\nconst rows = 4;\nconst columns = 4;\nlet score;\nlet field;\nlet moved;\nlet touchStartX;\nlet touchStartY;\nlet touchEndX;\nlet touchEndY;\n\nstartButton.addEventListener('click', () => {\n  startGame();\n});\n\nfunction startGame() {\n  field = Array.from(\n    { length: rows }, () => Array.from({ length: columns }, () => 0)\n  );\n\n  score = 0;\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  startButton.classList.replace('start', 'restart');\n  startButton.innerText = 'Restart';\n\n  addRandomCell();\n  addRandomCell();\n}\n\nfunction addRandomCell() {\n  setTimeout(() => {\n    const availableCells = getAvailableCells();\n\n    if (availableCells.length === 0) {\n      return;\n    }\n\n    const randomCell\n      = availableCells[Math.floor(Math.random() * availableCells.length)];\n    const value = Math.random() > 0.1 ? 2 : 4;\n\n    field[randomCell.row][randomCell.column] = value;\n\n    updateField();\n  }, 150);\n}\n\nfunction getAvailableCells() {\n  const availableCells = [];\n\n  for (let row = 0; row < rows; row++) {\n    for (let column = 0; column < columns; column++) {\n      if (field[row][column] === 0) {\n        availableCells.push({\n          row, column,\n        });\n      }\n    }\n  }\n\n  return availableCells;\n}\n\nfunction updateField() {\n  gameField.innerHTML = '';\n\n  for (let row = 0; row < rows; row++) {\n    const newRow = document.createElement('tr');\n\n    for (let column = 0; column < columns; column++) {\n      const value = field[row][column];\n      const newCell = document.createElement('td');\n\n      newCell.textContent = value > 0 ? value : '';\n      newCell.classList.add('field-cell');\n\n      if (value > 0) {\n        newCell.classList.add(`field-cell--${value}`);\n      }\n\n      if (value === 2048) {\n        messageWin.classList.remove('hidden');\n        startButton.classList.replace('restart', 'start');\n        startButton.innerText = 'Start';\n      }\n      newRow.appendChild(newCell);\n    }\n\n    gameField.appendChild(newRow);\n  }\n\n  gameScore.textContent = score;\n\n  if (gameLose()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction gameLose() {\n  if (getAvailableCells().length > 0) {\n    return false;\n  }\n\n  for (let row = 0; row < rows; row++) {\n    for (let cell = 0; cell < columns - 1; cell++) {\n      if (field[row][cell] === field[row][cell + 1]\n        || field[cell][row] === field[cell + 1][row]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keydown', pressKeyDown);\n\nfunction pressKeyDown(e) {\n  moved = false;\n\n  switch (e.key) {\n    case 'ArrowUp':\n      moved = moveCellsUp();\n      break;\n    case 'ArrowDown':\n      moved = moveCellsDown();\n      break;\n    case 'ArrowLeft':\n      moved = moveCellsLeft();\n      break;\n    case 'ArrowRight':\n      moved = moveCellsRight();\n      break;\n  }\n\n  if (moved) {\n    addRandomCell();\n  }\n}\n\nfunction moveCellsUp() {\n  moved = false;\n\n  for (let column = 0; column < columns; column++) {\n    for (let row = 1; row < rows; row++) {\n      if (field[row][column] !== 0) {\n        let newRow = row;\n\n        while (newRow > 0 && field[newRow - 1][column] === 0) {\n          newRow--;\n        }\n\n        if (newRow !== row) {\n          field[newRow][column] = field[row][column];\n          field[row][column] = 0;\n          moved = true;\n        }\n\n        if (\n          newRow > 0 && field[newRow - 1][column] === field[newRow][column]\n        ) {\n          field[newRow - 1][column] *= 2;\n          field[newRow][column] = 0;\n          score += field[newRow - 1][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  updateField();\n\n  return moved;\n}\n\nfunction moveCellsDown() {\n  moved = false;\n\n  for (let column = 0; column < columns; column++) {\n    for (let row = rows - 2; row >= 0; row--) {\n      if (field[row][column] !== 0) {\n        let newRow = row;\n\n        while (newRow < rows - 1 && field[newRow + 1][column] === 0) {\n          newRow++;\n        }\n\n        if (newRow !== row) {\n          field[newRow][column] = field[row][column];\n          field[row][column] = 0;\n          moved = true;\n        }\n\n        if (\n          newRow < rows - 1\n          && field[newRow + 1][column] === field[newRow][column]\n        ) {\n          field[newRow + 1][column] *= 2;\n          field[newRow][column] = 0;\n          score += field[newRow + 1][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  updateField();\n\n  return moved;\n}\n\nfunction moveCellsLeft() {\n  moved = false;\n\n  for (let row = 0; row < rows; row++) {\n    for (let column = 1; column < columns; column++) {\n      if (field[row][column] !== 0) {\n        let newColumn = column;\n\n        while (newColumn > 0 && field[row][newColumn - 1] === 0) {\n          newColumn--;\n        }\n\n        if (newColumn !== column) {\n          field[row][newColumn] = field[row][column];\n          field[row][column] = 0;\n          moved = true;\n        }\n\n        if (\n          newColumn > 0 && field[row][newColumn - 1] === field[row][newColumn]\n        ) {\n          field[row][newColumn - 1] *= 2;\n          field[row][newColumn] = 0;\n          score += field[row][newColumn - 1];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  updateField();\n\n  return moved;\n}\n\nfunction moveCellsRight() {\n  moved = false;\n\n  for (let row = 0; row < rows; row++) {\n    for (let column = columns - 2; column >= 0; column--) {\n      if (field[row][column] !== 0) {\n        let newColumn = column;\n\n        while (newColumn < columns - 1 && field[row][newColumn + 1] === 0) {\n          newColumn++;\n        }\n\n        if (newColumn !== column) {\n          field[row][newColumn] = field[row][column];\n          field[row][column] = 0;\n          moved = true;\n        }\n\n        if (\n          newColumn < columns - 1\n          && field[row][newColumn + 1] === field[row][newColumn]\n        ) {\n          field[row][newColumn + 1] *= 2;\n          field[row][newColumn] = 0;\n          score += field[row][newColumn + 1];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  updateField();\n\n  return moved;\n}\n\ndocument.addEventListener('touchstart', (e) => {\n  touchStartX = e.touches[0].clientX;\n  touchStartY = e.touches[0].clientY;\n});\n\ndocument.addEventListener('touchend', (e) => {\n  touchEndX = e.changedTouches[0].clientX;\n  touchEndY = e.changedTouches[0].clientY;\n  handleSwipe();\n});\n\nfunction handleSwipe() {\n  moved = false;\n\n  const swipeThreshold = 100;\n\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n\n  if (\n    Math.abs(deltaX) < swipeThreshold\n    && Math.abs(deltaY) < swipeThreshold\n  ) {\n    return;\n  }\n\n  switch (true) {\n    case Math.abs(deltaX) >= Math.abs(deltaY):\n      if (deltaX > 0) {\n        moved = moveCellsRight();\n      } else {\n        moved = moveCellsLeft();\n      }\n      break;\n\n    default:\n      if (deltaY > 0) {\n        moved = moveCellsDown();\n      } else {\n        moved = moveCellsUp();\n      }\n  }\n\n  if (moved) {\n    addRandomCell();\n  }\n\n  updateField();\n}\n\nrulesButton.addEventListener('click', () => {\n  rules.classList.remove('visibility');\n});\n\nrulesExitButton.addEventListener('click', () => {\n  rules.classList.add('visibility');\n});\n"]}